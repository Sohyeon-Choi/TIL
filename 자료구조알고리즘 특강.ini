## 함수 선언부


## 전역 변수부
katok = ['다현', '정연', '쯔위', '사나', '지효']

## 메인 코드부
print(katok)

## 데이터 추가 (모모에게 카톡 1회)
# 1단계 : 빈칸 추가
katok.append(None)
# 2단계 : 마지막 칸에 데이터 넣기
katok[5] = '모모'
print(katok)

## 데이터 삽입 (미나에게 카톡 40회 연속) --> 미나가 3등
# 1단계 : 빈칸 추가
katok.append(None)
# 2단계 : 한칸씩 옆으로.... (반복)
katok[6] = katok[5]
katok[5] = None
katok[5] = katok[4]
katok[4] = None
katok[4] = katok[3]
katok[3] = None
# 3단계 : 데이터 입력
katok[3] = '미나'
print(katok)

## 함수 선언부


## 전역 변수부
katok = ['다현', '정연', '쯔위', '사나', '지효']

## 메인 코드부
print(katok)

## 데이터 추가 (모모에게 카톡 1회)
# 1단계 : 빈칸 추가
katok.append(None)
# 2단계 : 마지막 칸에 데이터 넣기
katok[5] = '모모'
print(katok)

## 데이터 삽입 (미나에게 카톡 40회 연속) --> 미나가 3등
# 1단계 : 빈칸 추가
katok.append(None)
# 2단계 : 한칸씩 옆으로.... (반복)
katok[6] = katok[5]
katok[5] = None
katok[5] = katok[4]
katok[4] = None
katok[4] = katok[3]
katok[3] = None
# 3단계 : 데이터 입력
katok[3] = '미나'
print(katok)

## 데이터 삭제 (사나가 카톡 차단) --> 4등 삭제
# 1단계 : 지우기
katok[4] = None
# 2단계 : 1칸씩 앞으로 이동.. 마지막 친구까지
katok[4] = katok[5]
katok[5] = None
katok[5] = katok[6]
katok[6] = None
# 3단계 : 빈칸 제거
del(katok[6])
print(katok)

## 함수
def add_data(friend) : # 데이터 추가
    # 1단계 : 빈칸 추가
    katok.append(None)
    kLen = len(katok)
    # 2단계: 데이터 입력
    katok[kLen-1] = friend    

## 전역
katok = []

## 메인
add_data('다현')
add_data('정연')
add_data('쯔위')
add_data('사나')
add_data('지효')
print(katok)
add_data('모모')
print(katok)

## 함수
def add_data(friend) : # 데이터 추가
    # 1단계 : 빈칸 추가
    katok.append(None)
    kLen = len(katok)
    # 2단계: 데이터 입력
    katok[kLen-1] = friend

def insert_data(position, friend) : # 데이터 삽입
    # 1단계 : 빈칸 추가
    katok.append(None)
    kLen = len(katok)
    # 2단계 : 한칸씩 옆으로.... (반복)
    for i in range(kLen-1, position, -1) : #핵심! 어려움
        katok[i] = katok[i-1]
        katok[i-1] = None
    # 3단계 : 데이터 입력
    katok[position] = friend


## 전역
katok = []

## 메인
add_data('다현')
add_data('정연')
add_data('쯔위')
add_data('사나')
add_data('지효')
print(katok)
add_data('모모')
print(katok)

insert_data(3, '미나')
print(katok)

## 함수
def add_data(friend) : # 데이터 추가
    # 1단계 : 빈칸 추가
    katok.append(None)
    kLen = len(katok)
    # 2단계: 데이터 입력
    katok[kLen-1] = friend

def insert_data(position, friend) : # 데이터 삽입
    # 1단계 : 빈칸 추가
    katok.append(None)
    kLen = len(katok)
    # 2단계 : 한칸씩 옆으로.... (반복)
    for i in range(kLen-1, position, -1) : #핵심! 어려움
        katok[i] = katok[i-1]
        katok[i-1] = None
    # 3단계 : 데이터 입력
    katok[position] = friend

def delete_data(position) : # 데이터 삭제
    # 1단계 : 지우기
    katok[position] = None
    kLen =len(katok)
    # 2단계 : 한칸씩 당기기..... (반복)
    for i in range(position+1, kLen, 1) : # 핵심!
        katok[i-1] = katok[i]
        katok[i] = None
    # 3단계 : 마지막 칸을 제거
    del(katok[kLen-1])

## 전역
katok = []

## 메인
add_data('다현')
add_data('정연')
add_data('쯔위')
add_data('사나')
add_data('지효')
print(katok)
add_data('모모')
print(katok)

insert_data(3, '미나')
print(katok)

delete_data(4)
print(katok)

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

## 전역

## 메인
node1 = Node()
node1.data = '다현'

node2 = Node()
node2.data = '정연'
node1.link = node2

node3 = Node()
node3.data = '쯔위'
node2.link = node3

node4 = Node()
node4.data = '사나'
node3.link = node4

node5 = Node()
node5.data = '지효'
node4.link = node5

print(node1.data, end=' ')
print(node2.data, end=' ')
print(node3.data, end=' ')
print(node4.data, end=' ')
print(node5.data, end=' ')

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

## 전역

## 메인
node1 = Node()
node1.data = '다현'

node2 = Node()
node2.data = '정연'
node1.link = node2

node3 = Node()
node3.data = '쯔위'
node2.link = node3

node4 = Node()
node4.data = '사나'
node3.link = node4

node5 = Node()
node5.data = '지효'
node4.link = node5

newNode = Node()
newNode.data = '재남'
newNode.link = node2.link
node2.link = newNode

# node2.link = node3.link
# del(node3)

current = node1
print(current.data, end=' ')
while (current.link != None) :
    current = current.link
    print(current.data, end=' ')
print()


# print(node1.data, end=' ')
# print(node1.link.data, end=' ')
# print(node1.link.link.data, end=' ')
# print(node1.link.link.link.data, end=' ')
# print(node1.link.link.link.link.data, end=' ')
# print(node1.link.link.link.link.link.data, end=' ')

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

def printNodes(start) :
    current = start
    print(current.data, end=' ')
    while (current.link != None):
        current = current.link
        print(current.data, end=' ')
    print()

## 변수
memory = []
head, current, pre = None, None, None
dataArray = ['다현', '정연', '쯔위', '사나', '지효'] # 여러분 데이터... 개수 관계없음
## 메인

node = Node()
node.data = dataArray[0]
head = node
memory.append(node) # 안 중요함.

for data in dataArray[1:] : # ['정연', '쯔위', ....
    pre = node
    node = Node()
    node.data = data
    pre.link = node
    memory.append(node)  # 안 중요함.

printNodes(head)
​

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

def printNodes(start) :
    current = start
    print(current.data, end=' ')
    while (current.link != None):
        current = current.link
        print(current.data, end=' ')
    print()

def insertNode(findData, insertData) :
    global memory, head, current, pre
    # Case 1 : 헤드 앞에 삽입 (다현, 화사)
    if (findData == head.data) :
        node = Node()
        node.data = '화사'
        node.link = head
        head = node
        memory.append(node) # 안 중요함.


## 변수
memory = []
head, current, pre = None, None, None
dataArray = ['다현', '정연', '쯔위', '사나', '지효'] # 여러분 데이터... 개수 관계없음
## 메인

node = Node()
node.data = dataArray[0]
head = node
memory.append(node) # 안 중요함.

for data in dataArray[1:] : # ['정연', '쯔위', ....
    pre = node
    node = Node()
    node.data = data
    pre.link = node
    memory.append(node)  # 안 중요함.

printNodes(head)

insertNode('다현', '화사')
printNodes(head)

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

def printNodes(start) :
    current = start
    print(current.data, end=' ')
    while (current.link != None):
        current = current.link
        print(current.data, end=' ')
    print()

def insertNode(findData, insertData) :
    global memory, head, current, pre
    # Case 1 : 헤드 앞에 삽입 (다현, 화사)
    if (findData == head.data) :
        node = Node()
        node.data = '화사'
        node.link = head
        head = node
        memory.append(node) # 안 중요함.
        return
    # Case 2 : 중간 노드 앞에 삽입(사나, 솔라)
    current = head
    while (current.link != None) :
        pre = current
        current = current.link
        if (current.data == findData) :
            node = Node()
            node.data = insertData
            node.link = current
            pre.link = node
            memory.append(node)  # 안 중요함.
            return



## 변수
memory = []
head, current, pre = None, None, None
dataArray = ['다현', '정연', '쯔위', '사나', '지효'] # 여러분 데이터... 개수 관계없음
## 메인

node = Node()
node.data = dataArray[0]
head = node
memory.append(node) # 안 중요함.

for data in dataArray[1:] : # ['정연', '쯔위', ....
    pre = node
    node = Node()
    node.data = data
    pre.link = node
    memory.append(node)  # 안 중요함.

printNodes(head)

# insertNode('다현', '화사')
# printNodes(head)

insertNode('사나', '솔라')
printNodes(head)

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

def printNodes(start) :
    current = start
    print(current.data, end=' ')
    while (current.link != None):
        current = current.link
        print(current.data, end=' ')
    print()

def insertNode(findData, insertData) :
    global memory, head, current, pre
    # Case 1 : 헤드 앞에 삽입 (다현, 화사)
    if (findData == head.data) :
        node = Node()
        node.data = '화사'
        node.link = head
        head = node
        memory.append(node) # 안 중요함.
        return
    # Case 2 : 중간 노드 앞에 삽입(사나, 솔라)
    current = head
    while (current.link != None) :
        pre = current
        current = current.link
        if (current.data == findData) :
            node = Node()
            node.data = insertData
            node.link = current
            pre.link = node
            memory.append(node)  # 안 중요함.
            return
    # Case 3 : 없는 노드 앞에 삽입 (재남, 문별)
    node = Node()
    node.data = insertData
    current.link = node
    memory.append(node)  # 안 중요함.
    return


## 변수
memory = []
head, current, pre = None, None, None
dataArray = ['다현', '정연', '쯔위', '사나', '지효'] # 여러분 데이터... 개수 관계없음
## 메인

node = Node()
node.data = dataArray[0]
head = node
memory.append(node) # 안 중요함.

for data in dataArray[1:] : # ['정연', '쯔위', ....
    pre = node
    node = Node()
    node.data = data
    pre.link = node
    memory.append(node)  # 안 중요함.

printNodes(head)

# insertNode('다현', '화사')
# printNodes(head)

# insertNode('사나', '솔라')
# printNodes(head)

insertNode('재남', '문별')
printNodes(head)

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

def printNodes(start) :
    current = start
    print(current.data, end=' ')
    while (current.link != None):
        current = current.link
        print(current.data, end=' ')
    print()

def insertNode(findData, insertData) :
    global memory, head, current, pre
    # Case 1 : 헤드 앞에 삽입 (다현, 화사)
    if (findData == head.data) :
        node = Node()
        node.data = insertData
        node.link = head
        head = node
        memory.append(node) # 안 중요함.
        return
    # Case 2 : 중간 노드 앞에 삽입(사나, 솔라)
    current = head
    while (current.link != None) :
        pre = current
        current = current.link
        if (current.data == findData) :
            node = Node()
            node.data = insertData
            node.link = current
            pre.link = node
            memory.append(node)  # 안 중요함.
            return
    # Case 3 : 없는 노드 앞에 삽입 (재남, 문별)
    node = Node()
    node.data = insertData
    current.link = node
    memory.append(node)  # 안 중요함.
    return

def deleteNode(deleteData) :
    global memory, head, current, pre
    # Case 1 : 헤드를 삭제 (다현)
    if (deleteData == head.data) :
        current = head
        head = head.link
        del(current)
        return
    # Case 2 : 중간 노드를 삭제(쯔위)
    current = head
    while (current.link != None) :
        pre = current
        current = current.link
        if (current.data == deleteData) :
            pre.link = current.link
            del (current)
            return
    # Case 3 : 없는 노드를 삭제 (재남)
    return


## 변수
memory = []
head, current, pre = None, None, None
dataArray = ['다현', '정연', '쯔위', '사나', '지효'] # 여러분 데이터... 개수 관계없음
## 메인

node = Node()
node.data = dataArray[0]
head = node
memory.append(node) # 안 중요함.

for data in dataArray[1:] : # ['정연', '쯔위', ....
    pre = node
    node = Node()
    node.data = data
    pre.link = node
    memory.append(node)  # 안 중요함.

printNodes(head)

# insertNode('다현', '화사')
# printNodes(head)

# insertNode('사나', '솔라')
# printNodes(head)

# insertNode('재남', '문별')
# printNodes(head)

# deleteNode('다현')
# printNodes(head)

# deleteNode('쯔위')
# printNodes(head)

deleteNode('재남')
printNodes(head)
​

## 함수
class Node() :
    def __init__(self):
        self.data = None
        self.link = None

def printNodes(start) :
    current = start
    print(current.data, end=' ')
    while (current.link != None):
        current = current.link
        print(current.data, end=' ')
    print()

def insertNode(findData, insertData) :
    global memory, head, current, pre
    # Case 1 : 헤드 앞에 삽입 (다현, 화사)
    if (findData == head.data) :
        node = Node()
        node.data = insertData
        node.link = head
        head = node
        memory.append(node) # 안 중요함.
        return
    # Case 2 : 중간 노드 앞에 삽입(사나, 솔라)
    current = head
    while (current.link != None) :
        pre = current
        current = current.link
        if (current.data == findData) :
            node = Node()
            node.data = insertData
            node.link = current
            pre.link = node
            memory.append(node)  # 안 중요함.
            return
    # Case 3 : 없는 노드 앞에 삽입 (재남, 문별)
    node = Node()
    node.data = insertData
    current.link = node
    memory.append(node)  # 안 중요함.
    return

def deleteNode(deleteData) :
    global memory, head, current, pre
    # Case 1 : 헤드를 삭제 (다현)
    if (deleteData == head.data) :
        current = head
        head = head.link
        del(current)
        return
    # Case 2 : 중간 노드를 삭제(쯔위)
    current = head
    while (current.link != None) :
        pre = current
        current = current.link
        if (current.data == deleteData) :
            pre.link = current.link
            del (current)
            return
    # Case 3 : 없는 노드를 삭제 (재남)
    return

def findNode(findData) :
    global memory, head, current, pre
    current = head
    if (findData == head.data) :
        return current
    while (current.link != None) :
        current = current.link
        if (findData == current.data) :
            return current
    return Node()

## 변수
memory = []
head, current, pre = None, None, None
dataArray = ['다현', '정연', '쯔위', '사나', '지효'] # 여러분 데이터... 개수 관계없음
## 메인

node = Node()
node.data = dataArray[0]
head = node
memory.append(node) # 안 중요함.

for data in dataArray[1:] : # ['정연', '쯔위', ....
    pre = node
    node = Node()
    node.data = data
    pre.link = node
    memory.append(node)  # 안 중요함.

printNodes(head)

# insertNode('다현', '화사')
# printNodes(head)

# insertNode('사나', '솔라')
# printNodes(head)

# insertNode('재남', '문별')
# printNodes(head)

# deleteNode('다현')
# printNodes(head)

# deleteNode('쯔위')
# printNodes(head)

# deleteNode('재남')
# printNodes(head)

fNode = findNode('사나')
print(fNode.data, '뮤비가 나옵니다. 쿵짝쿵짝~~')

## 함수


## 변수
#stack = [None, None, None, None, None]
SIZE = 5
stack = [None for _ in range(SIZE)]
top = -1

## 메인

## Push()
top += 1
stack[top] = '커피'
top += 1
stack[top] = '녹차'
top += 1
stack[top] = '꿀물'
print('바닥:', stack)

## Pop()
data = stack[top]
stack[top] = None
top -= 1
print('팝-->', data)
data = stack[top]
stack[top] = None
top -= 1
print('팝-->', data)
data = stack[top]
stack[top] = None
top -= 1
print('팝-->', data)

print('바닥:', stack)v

## 함수
def isStackFull() :
    global SIZE, stack, top
    if (top == SIZE-1) :
        return True
    else :
        return False

def push(data) :
    global SIZE, stack, top
    if (isStackFull() == True) :
        print('스택 꽉!')
        return
    top += 1
    stack[top] = data

## 변수
SIZE = 5
stack = [None for _ in range(SIZE)]
top = -1

## 메인
push('커피')
push('녹차')
push('꿀물')
push('콜라')
push('환타')
print('바닥:', stack)
push('게토레이')
print('바닥:', stack)

## 함수
def isStackFull() :
    global SIZE, stack, top
    if (top >= SIZE-1) :
        return True
    else :
        return False

def push(data) :
    global SIZE, stack, top
    if (isStackFull()) :
        print('스택 꽉!')
        return
    top += 1
    stack[top] = data

def isStackEmpty() :
    global SIZE, stack, top
    if (top <= -1) :
        return True
    else :
        return False

def pop() :
    global SIZE, stack, top
    if (isStackEmpty()) :
        print('스택 텅~')
        return
    data = stack[top]
    stack[top] = None
    top -= 1
    return data

## 변수
SIZE = 5
stack = [None for _ in range(SIZE)]
top = -1

## 메인
push('커피')
push('녹차')
# push('꿀물')
# push('콜라')
# push('환타')
# print('바닥:', stack)
# push('게토레이')
print('바닥:', stack)

retData = pop()
print('팝데이터==>', retData)
retData = pop()
print('팝데이터==>', retData)
retData = pop()
print('팝데이터==>', retData)
print('바닥:', stack)
​

## 함수
def isStackFull() :
    global SIZE, stack, top
    if (top >= SIZE-1) :
        return True
    else :
        return False

def push(data) :
    global SIZE, stack, top
    if (isStackFull()) :
        print('스택 꽉!')
        return
    top += 1
    stack[top] = data

def isStackEmpty() :
    global SIZE, stack, top
    if (top <= -1) :
        return True
    else :
        return False

def pop() :
    global SIZE, stack, top
    if (isStackEmpty()) :
        print('스택 텅~')
        return
    data = stack[top]
    stack[top] = None
    top -= 1
    return data

def peek() :
    global SIZE, stack, top
    if (isStackEmpty()) :
        print('스택 텅~')
        return
    return stack[top]

## 변수
SIZE = 5
stack = [None for _ in range(SIZE)]
top = -1

## 메인
push('커피')
push('녹차')
# push('꿀물')
# push('콜라')
# push('환타')
# print('바닥:', stack)
# push('게토레이')
print('바닥:', stack)

retData = pop()
print('팝데이터==>', retData)

print('다음 데이터:', peek())

retData = pop()
print('팝데이터==>', retData)
retData = pop()
print('팝데이터==>', retData)
print('바닥:', stack)

ARRAY_LENGTH = 5  # 배열의 행과 열 크기(고정)

def replaceData(numData): # numData	2차원 정수 배열
    retData = [] # 조건에 따라서 전처리된 2차원 배열

    ###########   여기부터 코딩 (1) ---------------->
    retData = numData[:]
    for i in range(ARRAY_LENGTH) :
        for k in range(ARRAY_LENGTH) :
            if (retData[i][k] < 0) :
                retData[i][k] = 0
            if (retData[i][k] > 100) :
                retData[i][k] = retData[i][k] % 100
    ###########   <-------------- 여기까지 코딩 (1)

    return retData


# 2x2 크기의 배열의 최대합을 구한다.
def getMaxSum(numData): # 요구 사항에 맞춰 처리된 2차원 정수 배열
    maxSum = 0 # 최대합

    ###########   여기부터 코딩 (2) ---------------->
    for i in range(ARRAY_LENGTH-1) :
        for k in range(ARRAY_LENGTH-1) :
            hap = numData[i][k] + numData[i][k+1] + numData[i+1][k] \
                 + numData[i+1][k+1]
            if  (maxSum < hap) :
                maxSum = hap
    ###########   <-------------- 여기까지 코딩 (2)

    return maxSum

## 전역 변수 선언 부분
numData =[] # 5x5 배열
ARRAY_LENGTH = 5 # 배열의 행과 열 크기(고정)

def main() :
        global numData

        loadData() # 2차원 배열 읽어오기

        ## 원본 출력
        print(' ----- 초기 배열 -----')
        printData()

        # 1. 데이터 치환 작업
        numData = replaceData(numData)
        print(' ----- 치환 후 배열 -----')
        printData()

        # 2. 최대 합 구하기.(2x2 크기)
        maxSum = getMaxSum(numData)
        print('최대 영역의 합: %d' % maxSum)

       
## 함수 선언 부분
def  loadData() : # 데이터 불러오기
    global numData

    ###########
    # 제공 데이터 세트 1 
    # 5x5 숫자 배열. 
    ###########
    numData = \
    [
        [ 5, 7, -5, 100, 73 ],
        [ 35, 23, 4, 190, 33 ],
        [ 49, 85, 662, 39, 81 ],
        [ 124, -59, 86, 46, 52 ],
        [ 27, 7, 8, 33, -56 ] 
    ]
    
    

def printData() :
        for i in range(0, ARRAY_LENGTH) :
                for k in range(0, ARRAY_LENGTH) :
                        try :
                                print("%5d" % numData[i][k], end='')
                        except :
                                pass
                print()
        print('--------------------------------------')

## 메인 함수 호출 ##
if __name__ == "__main__" :
    main()
​

## 함수


## 변수
SIZE = 5
queue = [None for _ in range(SIZE)]
front = rear = -1

## 메인

# enQueue()
rear += 1
queue[rear] = '화사'
rear += 1
queue[rear] = '솔라'
rear += 1
queue[rear] = '문별'
print('출구<--', queue, '<--입구')
# deQueue()
front += 1
data = queue[front]
queue[front]= None
print('식사손님 :', data)
front += 1
data = queue[front]
queue[front]= None
print('식사손님 :', data)
front += 1
data = queue[front]
queue[front]= None
print('식사손님 :', data)
print('출구<--', queue, '<--입구')

## 함수
def isQueueFull() :
    global SIZE, queue, front, rear
    if(rear >= SIZE-1) :
        return True
    else :
        return False

def enQueue(data) :
    global SIZE, queue, front, rear
    if (isQueueFull()) :
        print('큐 꽉!')
        return
    rear += 1
    queue[rear] = data


## 변수
SIZE = 5
queue = [None for _ in range(SIZE)]
front = rear = -1

## 메인
enQueue('화사')
enQueue('솔라')
enQueue('문별')
enQueue('휘인')
enQueue('선미')
print('출구<--', queue, '<--입구')
enQueue('재남')
print('출구<--', queue, '<--입구')

## 함수
def isQueueFull() :
    global SIZE, queue, front, rear
    if(rear >= SIZE-1) :
        return True
    else :
        return False

def enQueue(data) :
    global SIZE, queue, front, rear
    if (isQueueFull()) :
        print('큐 꽉!')
        return
    rear += 1
    queue[rear] = data

def isQueueEmpty() :
    global SIZE, queue, front, rear
    if (front == rear) :
        return True
    else :
        return False

def deQueue() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    front += 1
    data = queue[front]
    queue[front] = None
    return data    

## 변수
SIZE = 5
queue = [None for _ in range(SIZE)]
front = rear = -1

## 메인
enQueue('화사')
enQueue('솔라')
# enQueue('문별')
# enQueue('휘인')
# enQueue('선미')
# print('출구<--', queue, '<--입구')
# enQueue('재남')
print('출구<--', queue, '<--입구')

retData = deQueue()
print('손님 이리로 :', retData)
retData = deQueue()
print('손님 이리로 :', retData)
print('출구<--', queue, '<--입구')

retData = deQueue()
print('손님 이리로 :', retData)

## 함수
def isQueueFull() :
    global SIZE, queue, front, rear
    if(rear >= SIZE-1) :
        return True
    else :
        return False

def enQueue(data) :
    global SIZE, queue, front, rear
    if (isQueueFull()) :
        print('큐 꽉!')
        return
    rear += 1
    queue[rear] = data

def isQueueEmpty() :
    global SIZE, queue, front, rear
    if (front == rear) :
        return True
    else :
        return False

def deQueue() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    front += 1
    data = queue[front]
    queue[front] = None
    return data

def peek() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    return queue[front+1]

## 변수
SIZE = 5
queue = [None for _ in range(SIZE)]
front = rear = -1

## 메인
enQueue('화사')
enQueue('솔라')
# enQueue('문별')
# enQueue('휘인')
# enQueue('선미')
# print('출구<--', queue, '<--입구')
# enQueue('재남')
print('출구<--', queue, '<--입구')

retData = deQueue()
print('손님 이리로 :', retData)

print('준비하세요 ==>', peek())

retData = deQueue()
print('손님 이리로 :', retData)
print('출구<--', queue, '<--입구')

retData = deQueue()
print('손님 이리로 :', retData)

## 함수
def isQueueFull() :
    global SIZE, queue, front, rear
    if (rear != SIZE-1) :
        return False
    elif (rear == SIZE-1 and front == -1) :
        return True
    elif (rear == SIZE-1 and front != -1) : # else
        for i in range(front+1, SIZE) :
            queue[i-1] = queue[i]
            queue[i] = None
        front -= 1
        rear -= 1
        return False

def enQueue(data) :
    global SIZE, queue, front, rear
    if (isQueueFull()) :
        print('큐 꽉!')
        return
    rear += 1
    queue[rear] = data

def isQueueEmpty() :
    global SIZE, queue, front, rear
    if (front == rear) :
        return True
    else :
        return False

def deQueue() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    front += 1
    data = queue[front]
    queue[front] = None
    return data

def peek() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    return queue[front+1]

## 변수
SIZE = 5
queue = [None for _ in range(SIZE)]
front = rear = -1

## 메인
enQueue('화사')
enQueue('솔라')
enQueue('문별')
enQueue('휘인')
enQueue('선미')
print('출구<--', queue, '<--입구')

retData = deQueue()
print('손님 이리로 :', retData)

retData = deQueue()
print('손님 이리로 :', retData)
print('출구<--', queue, '<--입구')


enQueue('재남')
print('출구<--', queue, '<--입구')
enQueue('정국')
print('출구<--', queue, '<--입구')

enQueue('길동')
print('출구<--', queue, '<--입구')

## 함수
def isQueueFull() :
    global SIZE, queue, front, rear
    if ( (rear+1) % SIZE == front) :
        return True
    else :
        return False

def enQueue(data) :
    global SIZE, queue, front, rear
    if (isQueueFull()) :
        print('큐 꽉!')
        return
    rear = (rear + 1) % SIZE
    queue[rear] = data

def isQueueEmpty() :
    global SIZE, queue, front, rear
    if (front == rear) :
        return True
    else :
        return False

def deQueue() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    front = (front + 1) % SIZE
    data = queue[front]
    queue[front] = None
    return data

def peek() :
    global SIZE, queue, front, rear
    if (isQueueEmpty()) :
        print('큐 텅~')
        return
    return queue[(front+1) % SIZE]

## 변수
SIZE = 5
queue = [None for _ in range(SIZE)]
front = rear = 0

## 메인
enQueue('화사')
enQueue('솔라')
enQueue('문별')
# enQueue('휘인')
# enQueue('선미')
print('출구<--', queue, '<--입구')
#
retData = deQueue()
print('손님 이리로 :', retData)

retData = deQueue()
print('손님 이리로 :', retData)
print('출구<--', queue, '<--입구')
#
#
enQueue('재남')
print('출구<--', queue, '<--입구')
enQueue('정국')
print('출구<--', queue, '<--입구')

enQueue('길동')
print('출구<--', queue, '<--입구')

enQueue('춘향')
print('출구<--', queue, '<--입구')

## 함수
class TreeNode() :
    def __init__(self):
        self.left = None
        self.data = None
        self.right = None

## 변수

## 메인
node1 = TreeNode()
node1.data = '화사'

node2 = TreeNode()
node2.data = '솔라'
node1.left = node2

node3 = TreeNode()
node3.data = '문별'
node1.right = node3

node4 = TreeNode()
node4.data = '휘인'
node2.left = node4

node5 = TreeNode()
node5.data = '쯔위'
node2.right = node5

node6 = TreeNode()
node6.data = '선미'
node3.left = node6

root = node1

print(root.data)
print(root.left.data, root.right.data)
print(root.left.left.data, root.left.right.data, root.right.left.data)


# print(node1.data)
# print(node2.data, node3.data)
# print(node4.data, node5.data, node6.data)
​

## 함수
class Graph() :
    def __init__(self, size):
        self.graph = [ [0 for _ in range(size)] \
                       for _ in range(size)]

## 변수
G1 = None
A, B, C, D = 0, 1, 2, 3

## 메인
G1 = Graph(4)

G1.graph[A][B] = 1; G1.graph[A][C] = 1; G1.graph[A][D] = 1
G1.graph[B][A] = 1; G1.graph[B][C] = 1
G1.graph[C][A] = 1; G1.graph[C][B] = 1; G1.graph[C][D] = 1
G1.graph[D][A] = 1; G1.graph[D][C] = 1

for row in range(4) :
    for col in range(4) :
        print(G1.graph[row][col], end=' ')
    print()
​
## 함수
def findMinIndex(ary) :
    minIdx = 0
    for i in range(1, len(ary)) :
        if (ary[minIdx] > ary[i]) :
            minIdx = i
    return minIdx

## 변수
testAry = [55, 88, 33, 77, 99, 11, 55, 89, 13]

## 메인
minPos = findMinIndex(testAry)
print('최솟값 -->', testAry[minPos])

## 함수
import random
def findMinIndex(ary) :
    minIdx = 0
    for i in range(1, len(ary)) :
        if (ary[minIdx] > ary[i]) :
            minIdx = i
    return minIdx

## 변수
before = [random.randint(30, 190) for _ in range(20)]
after = []

## 메인
print('정렬 전-->', before)
for i in range(len(before)) :
    minPos = findMinIndex(before)
    after.append(before[minPos])
    del(before[minPos])
print('정렬 후-->', after)
​
## 함수
import random
def selectionSort(ary) :
    n = len(ary)
    for i in range(0, n-1) :
        minIdx = i
        for k in range(i+1, n) :
            if (ary[minIdx] > ary[k]) :
                minIdx = k
        ary[i], ary[minIdx] = ary[minIdx], ary[i]

    return ary

## 변수
dataAry = [random.randint(30, 190) for _ in range(8)]

## 메인
print('정렬 전-->', dataAry)
dataAry = selectionSort(dataAry)
print('정렬 후-->', dataAry)
​
## 함수
import random

def seqSearch(ary, fData) :
    pos = -1
    for i in range(len(ary)) :
        if (fData == ary[i]) :
            pos = i
            break
    return pos

## 변수
dataAry = [random.randint(30, 190) for _ in range(8)]
findData = random.choice(dataAry)

## 메인
print('배열-->', dataAry)
position = seqSearch(dataAry, findData)
if (position == -1) :
    print(findData, '없어요 ㅠ')
else :
    print(findData, '가', position, '위치에 있어요')
​
## 함수
import random
def binSearch(ary, fData) :
    pos = -1
    start = 0
    end = len(ary)-1
    while (start <= end) :
        mid = (start+end)//2
        if (ary[mid] == fData) :
            pos = mid
            break
        elif (ary[mid] < fData) :
            start = mid + 1
        else :
            end = mid - 1
    return pos

## 변수
dataAry = [random.randint(30, 190) for _ in range(10)]
dataAry.sort()
findData = random.choice(dataAry)

## 메인
print('배열-->', dataAry)
position = binSearch(dataAry, findData)
if (position == -1) :
    print(findData, '없어요 ㅠ')
else :
    print(findData, '가', position, '위치에 있어요')

## 함수
import random
def binSearch(ary, fData) :
    global count
    pos = -1
    start = 0
    end = len(ary)-1
    while (start <= end) :
        count += 1
        mid = (start+end)//2
        if (ary[mid] == fData) :
            pos = mid
            break
        elif (ary[mid] < fData) :
            start = mid + 1
        else :
            end = mid - 1
    return pos

## 변수
dataAry = [random.randint(0, 100000000000) for _ in range(1000000)]
dataAry.sort()
findData = random.choice(dataAry)
# findData = 91
count = 0
## 메인
print('배열-->', dataAry[:10])
position = binSearch(dataAry, findData)
if (position == -1) :
    print(findData, '없어요 ㅠ')
else :
    print(findData, '가', position, '위치에 있어요', count, '번')

## 함수
import random
def binSearch(ary, fData) :
    global count
    pos = -1
    start = 0
    end = len(ary)-1
    while (start <= end) :
        count += 1
        mid = (start+end)//2
        if (ary[mid] == fData) :
            pos = mid
            break
        elif (ary[mid] < fData) :
            start = mid + 1
        else :
            end = mid - 1
    return pos

## 변수
dataAry = [random.randint(0, 100000000000) for _ in range(1000000)]
dataAry.sort()
findData = random.choice(dataAry)
# findData = 91
count = 0
## 메인
print('배열-->', dataAry[:10])
position = binSearch(dataAry, findData)
if (position == -1) :
    print(findData, '없어요 ㅠ')
else :
    print(findData, '가', position, '위치에 있어요', count, '번')